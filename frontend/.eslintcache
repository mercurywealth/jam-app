[{"G:\\_src\\jam-app\\frontend\\src\\reportWebVitals.ts":"1","G:\\_src\\jam-app\\frontend\\src\\App.tsx":"2","G:\\_src\\jam-app\\frontend\\src\\index.tsx":"3","G:\\_src\\jam-app\\frontend\\src\\routes\\main.tsx":"4","G:\\_src\\jam-app\\frontend\\src\\routes\\note.tsx":"5","G:\\_src\\jam-app\\frontend\\src\\components\\input\\graphQLForm.tsx":"6","G:\\_src\\jam-app\\frontend\\src\\components\\layout\\error.tsx":"7","G:\\_src\\jam-app\\frontend\\src\\components\\modals\\delete.tsx":"8","G:\\_src\\jam-app\\frontend\\src\\components\\views\\notes.tsx":"9","G:\\_src\\jam-app\\frontend\\src\\components\\wrappers\\auth.tsx":"10","G:\\_src\\jam-app\\frontend\\src\\graphql\\note\\__generated__\\getnote.generated.ts":"11","G:\\_src\\jam-app\\frontend\\src\\graphql\\note\\__generated__\\updatenote.generated.ts":"12","G:\\_src\\jam-app\\frontend\\src\\graphql\\note\\__generated__\\getnotes.generated.ts":"13","G:\\_src\\jam-app\\frontend\\src\\components\\layout\\navbar.tsx":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":1926,"mtime":1606930941586,"results":"17","hashOfConfig":"16"},{"size":556,"mtime":1606837628413,"results":"18","hashOfConfig":"16"},{"size":493,"mtime":1606931124978,"results":"19","hashOfConfig":"16"},{"size":1565,"mtime":1606837815711,"results":"20","hashOfConfig":"16"},{"size":5332,"mtime":1606834777239,"results":"21","hashOfConfig":"16"},{"size":981,"mtime":1606923611193,"results":"22","hashOfConfig":"16"},{"size":974,"mtime":1606834240627,"results":"23","hashOfConfig":"16"},{"size":2624,"mtime":1606843362673,"results":"24","hashOfConfig":"16"},{"size":1176,"mtime":1606935115981,"results":"25","hashOfConfig":"16"},{"size":1852,"mtime":1606826954309,"results":"26","hashOfConfig":"16"},{"size":2160,"mtime":1606827052638,"results":"27","hashOfConfig":"16"},{"size":1827,"mtime":1606827353739,"results":"28","hashOfConfig":"16"},{"size":745,"mtime":1606934560689,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1gnsxli",{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"G:\\_src\\jam-app\\frontend\\src\\reportWebVitals.ts",[],["64","65"],"G:\\_src\\jam-app\\frontend\\src\\App.tsx",["66","67","68"],"G:\\_src\\jam-app\\frontend\\src\\index.tsx",[],["69","70"],"G:\\_src\\jam-app\\frontend\\src\\routes\\main.tsx",["71","72","73"],"import \"./main.css\";\r\nimport Notes from '../components/views/notes';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport { Container, Loader } from 'semantic-ui-react';\r\nimport AuthWrapper from \"../components/wrappers/auth\";\r\n\r\ninterface MainRouteProps {}\r\n\r\nexport default function MainRoute (props: MainRouteProps){\r\n    const history = useHistory();\r\n    return <Container className=\"main\">\r\n        <AuthWrapper>\r\n            <Notes/>\r\n        </AuthWrapper>\r\n    </Container>\r\n}","G:\\_src\\jam-app\\frontend\\src\\routes\\note.tsx",[],"G:\\_src\\jam-app\\frontend\\src\\components\\input\\graphQLForm.tsx",["74","75","76","77","78","79"],"import React, {MouseEvent, FunctionComponent, ComponentClass, ChangeEvent, Props, useState, useEffect} from 'react';\r\nimport { Button, Container, Form, Icon, Loader } from \"semantic-ui-react\";\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport Error from '../layout/error';\r\n\r\ntype GraphQLFormField = {\r\n    name: string,\r\n    type?: string | FunctionComponent | ComponentClass<any, any>,\r\n    props?: any,\r\n}\r\n\r\ninterface GraphQLFormProps extends RouteComponentProps<{id?: string}> {\r\n    title: string,\r\n    className?: string,\r\n    cancelURI?: string,\r\n    fields: GraphQLFormField[],\r\n    data?: {},\r\n    config: {\r\n        className: string,\r\n        get: {\r\n            hook: any,\r\n        },\r\n        update: {\r\n            hook: any,\r\n        },\r\n        create: {\r\n            hook: any,\r\n        },\r\n    }\r\n    children?: React.ReactNode\r\n}\r\n\r\n// Reusable generic form class for creating/editing entities via our GraphQL API\r\nfunction GraphQLForm(props: GraphQLFormProps){\r\n    //State and setup\r\n    const edit = props.match.params.id != null;\r\n    var returnData = {};\r\n    var [state, setState] = useState({\r\n        data: {} as any,\r\n    });\r\n\r\n    //Apply the data from the query into the state\r\n    const apply = function(data: any){\r\n        setState({data: query.data[props.config.className]})\r\n    }\r\n\r\n    //Apollo Hooks\r\n    var query: any = null;\r\n    const [updateItem, update] = props.config.update.hook();\r\n    const [addItem, add] = props.config.create.hook();\r\n\r\n    //If there is an ID in the url, query for the data of that entity to prefill the inputs\r\n    if (props.match.params.id){\r\n        query = props.config.get.hook({variables: {id: props.match.params.id}, onCompleted: apply});\r\n        if (query.loading) return <Container><Loader active/></Container>\r\n        if (query.error) return <Container><Error message={query.error.message} graphQLErrors={query.error?.graphQLErrors}/></Container>;\r\n    } \r\n\r\n    //Handle errors\r\n    if (update.error) return <Container><Error message={update.error.message} graphQLErrors={update.error?.graphQLErrors}/></Container>\r\n    if (add.error) return <Container><Error message={add.error.message} graphQLErrors={add.error?.graphQLErrors}/></Container>\r\n\r\n    //Save (send data to GraphQL)\r\n    const save = function() {\r\n        if (!props.data) props.data={};\r\n        const mergedData = {...props.data, ...state.data}; //merge prop data with the input state data\r\n        mergedData.id = props.match.params.id; //set the id\r\n\r\n        //Create/Update\r\n        if (edit) updateItem({variables: {...mergedData}});\r\n        else addItem({variables: {...mergedData}});\r\n    }\r\n\r\n    //Back/Cancel\r\n    const back = function() {\r\n        props.history.push(props.cancelURI ? props.cancelURI : \"../\");\r\n    }\r\n\r\n    //Once the add or update operation is complete, show a completed status screen\r\n    if (add.called || update.called){\r\n        return <Container>\r\n            <div className=\"form-end\">\r\n                <h1>{edit ? \"Saved!\" : \"Created!\"}</h1>\r\n                <span>The new {props.config.className} has been sucessfully been {edit ? \"saved\" : \"created\"}.</span>\r\n                <Button content=\"Back\" onClick={back}/>\r\n            </div>\r\n        </Container>\r\n    }\r\n\r\n    \r\n    //Render the form\r\n    //return <GraphQLFormClass {...props} save={save} data={returnData} edit={edit} loading={add.loading || update.loading}/>\r\n    return <Container className={props.className}>\r\n        <h1>{edit ? \"Edit\" : \"New\"} {props.title}</h1>\r\n        <Form>\r\n            {\r\n                props.fields.map((v: GraphQLFormField)=>{\r\n                    if (v.props == undefined) v.props = {};\r\n                    const fieldProps = Object.assign({}, v.props);\r\n                    const onChange = v.props.onChange;\r\n                    fieldProps.onChange = function(e: ChangeEvent) {\r\n                        console.log(state);\r\n                        const target = e.target as HTMLInputElement;\r\n                        var tmp = Object.assign({}, state.data);\r\n                        tmp[v.name] = target.value;\r\n                        setState({data: tmp});\r\n                        if (onChange) onChange(e);\r\n                    }\r\n                    fieldProps.value = state.data[v.name] ? state.data[v.name] : \"\";\r\n                    fieldProps.key = v.name;\r\n                    if (typeof v.type == \"string\"){\r\n                        fieldProps.type = v.type;\r\n                        return React.createElement(Form.Input, fieldProps);\r\n                    }else if (v.type){\r\n                        return React.createElement(v.type, fieldProps)\r\n                    }else{\r\n                        return React.createElement(Form.Input, fieldProps);\r\n                    }\r\n                    \r\n                })\r\n            }\r\n            <Form.Group className=\"form-right\">\r\n                <Button type=\"button\" content=\"Cancel\" onClick={back}/>\r\n                <Button content={edit ? \"Save\" : \"Create\"} icon={<Icon className={\"fas \" + (edit ? \"fa-save\" : \"fa-check\")}/>} \r\n                    labelPosition=\"right\" positive onClick={save} loading={add.loading || update.loading}/>\r\n            </Form.Group>\r\n        </Form>\r\n        {props.children}\r\n    </Container>\r\n}\r\nexport default GraphQLForm;","G:\\_src\\jam-app\\frontend\\src\\components\\layout\\error.tsx",[],"G:\\_src\\jam-app\\frontend\\src\\components\\modals\\delete.tsx",["80"],"G:\\_src\\jam-app\\frontend\\src\\components\\views\\notes.tsx",["81","82","83"],"import React, {useState, useMemo, useEffect} from 'react';\r\nimport { Loader, Card, Button, Icon } from 'semantic-ui-react';\r\nimport Error from '../layout/error';\r\nimport { useGetNotesQuery } from '../../graphql/note/__generated__/getnotes.generated';\r\nimport { useHistory, Link } from 'react-router-dom';\r\nimport DeleteModal from '../modals/delete';\r\nimport { useDeleteNoteMutation } from '../../graphql/note/__generated__/deletenote.generated';\r\n\r\nimport \"./notes.css\";\r\n\r\ninterface NotesProps {\r\n}\r\n\r\nexport default function Notes (props: NotesProps){\r\n    //Setup Hooks\r\n    //var [page, setPage] = useState(1);\r\n    const [modal, setModal] = useState(false);\r\n    const [id, setID] = useState(null);\r\n    const history = useHistory();\r\n    const { loading, error, data, refetch, fetchMore, startPolling} = useGetNotesQuery();\r\n    useEffect(()=>{\r\n        refetch();\r\n        startPolling(5);\r\n    }, [refetch]);\r\n\r\n    //Loading and error\r\n    if (loading) return <Loader active/>\r\n    if (error) return <Error message={error.message} graphQLErrors={error.graphQLErrors}/>\r\n\r\n    //Funcs\r\n    const create = ()=>{\r\n        history.push(\"/new\");\r\n    }\r\n\r\n    const edit = (id: any)=>{\r\n        history.push(`/note/${id}`);\r\n    }\r\n\r\n    const del = (id: any)=>{\r\n        setID(id);\r\n        setModal(true);\r\n    }\r\n\r\n    const hideModal = (success: boolean)=>{\r\n        setModal(false);\r\n        return {};\r\n    }\r\n\r\n\r\n    if (!data){\r\n        return <>\r\n            <span>You do not have any notes.</span>,\r\n            <span><Link to=\"/new\">Click Here</Link> to create one!</span>\r\n        </>\r\n    }\r\n    return <>\r\n        <div className=\"notes-grid\">\r\n            {modal ? <DeleteModal id={id} name=\"Note\" hook={useDeleteNoteMutation} onCompleted={hideModal}/> : null}\r\n            {data.notes.map(({id, title, description})=>{\r\n                return <Card key={id}>\r\n                    <Card.Content>\r\n                        <Card.Header>\r\n                            {title}\r\n                            <div className=\"controls\">\r\n                                <Icon className=\"far fa-pencil clickable\" onClick={()=>edit(id)}/>\r\n                                <Icon className=\"far fa-trash clickable\" onClick={()=>del(id)}/>\r\n                            </div>\r\n                        </Card.Header>\r\n                        <Card.Description>{description}</Card.Description>\r\n                    </Card.Content>\r\n                </Card>\r\n            })} \r\n        </div>\r\n        <Button content=\"Create Note\" icon={<Icon className=\"fal fa-plus\"/>} labelPosition=\"right\" onClick={create}/>\r\n    </>\r\n\r\n}","G:\\_src\\jam-app\\frontend\\src\\components\\wrappers\\auth.tsx",["84"],"G:\\_src\\jam-app\\frontend\\src\\graphql\\note\\__generated__\\getnote.generated.ts",[],"G:\\_src\\jam-app\\frontend\\src\\graphql\\note\\__generated__\\updatenote.generated.ts",[],"G:\\_src\\jam-app\\frontend\\src\\graphql\\note\\__generated__\\getnotes.generated.ts",[],"G:\\_src\\jam-app\\frontend\\src\\components\\layout\\navbar.tsx",["85"],"import {PropsWithChildren, useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Icon, Menu } from 'semantic-ui-react';\r\nimport { useMsal, useIsAuthenticated } from \"@azure/msal-react\";\r\n\r\ninterface NavBarProps {\r\n    \r\n}\r\n\r\nexport default function NavBar (props: PropsWithChildren<NavBarProps>){\r\n    const isAuth = useIsAuthenticated();\r\n    const msal = useMsal();\r\n    return <Menu>\r\n        <Menu.Item header><Link to=\"/\">Jam-App</Link></Menu.Item>\r\n        {isAuth ? <>\r\n            <Menu.Item content={msal.accounts[0].name}/>\r\n            <Menu.Item content=\"Logout\" icon={<Icon className=\"far fa-sign-out\"/>} style={{marginLeft: \"auto\"}} onClick={()=>msal.instance.logout()}/>\r\n        </> : null}\r\n    </Menu>;\r\n}",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":9,"nodeType":"92","messageId":"93","endLine":2,"endColumn":13},{"ruleId":"90","severity":1,"message":"94","line":2,"column":15,"nodeType":"92","messageId":"93","endLine":2,"endColumn":19},{"ruleId":"90","severity":1,"message":"95","line":3,"column":46,"nodeType":"92","messageId":"93","endLine":3,"endColumn":50},{"ruleId":"86","replacedBy":"96"},{"ruleId":"88","replacedBy":"97"},{"ruleId":"90","severity":1,"message":"95","line":3,"column":22,"nodeType":"92","messageId":"93","endLine":3,"endColumn":26},{"ruleId":"90","severity":1,"message":"98","line":4,"column":21,"nodeType":"92","messageId":"93","endLine":4,"endColumn":27},{"ruleId":"90","severity":1,"message":"99","line":10,"column":11,"nodeType":"92","messageId":"93","endLine":10,"endColumn":18},{"ruleId":"90","severity":1,"message":"100","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":26},{"ruleId":"90","severity":1,"message":"101","line":1,"column":76,"nodeType":"92","messageId":"93","endLine":1,"endColumn":81},{"ruleId":"90","severity":1,"message":"102","line":1,"column":93,"nodeType":"92","messageId":"93","endLine":1,"endColumn":102},{"ruleId":"90","severity":1,"message":"95","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":14},{"ruleId":"90","severity":1,"message":"103","line":37,"column":9,"nodeType":"92","messageId":"93","endLine":37,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":98,"column":33,"nodeType":"106","messageId":"107","endLine":98,"endColumn":35},{"ruleId":"90","severity":1,"message":"108","line":13,"column":27,"nodeType":"92","messageId":"93","endLine":13,"endColumn":32},{"ruleId":"90","severity":1,"message":"109","line":1,"column":26,"nodeType":"92","messageId":"93","endLine":1,"endColumn":33},{"ruleId":"90","severity":1,"message":"110","line":20,"column":44,"nodeType":"92","messageId":"93","endLine":20,"endColumn":53},{"ruleId":"111","severity":1,"message":"112","line":24,"column":8,"nodeType":"113","endLine":24,"endColumn":17,"suggestions":"114"},{"ruleId":"104","severity":1,"message":"105","line":20,"column":55,"nodeType":"106","messageId":"107","endLine":20,"endColumn":57},{"ruleId":"90","severity":1,"message":"115","line":1,"column":28,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'Link' is defined but never used.",["116"],["117"],"'Loader' is defined but never used.","'history' is assigned a value but never used.","'MouseEvent' is defined but never used.","'Props' is defined but never used.","'useEffect' is defined but never used.","'returnData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'error' is assigned a value but never used.","'useMemo' is defined but never used.","'fetchMore' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'startPolling'. Either include it or remove the dependency array.","ArrayExpression",["118"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [refetch, startPolling]",{"range":"121","text":"122"},[905,914],"[refetch, startPolling]"]